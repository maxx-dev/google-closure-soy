/* The following code was generated by JFlex 1.4.3 on 31.10.10 23:44 */

package com.shchekoldin.intellijidea.plugins.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.shchekoldin.intellijidea.plugins.SoyElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31.10.10 23:44 from the specification file
 * <tt>soy.flex</tt>
 */
final class _SoyLexer implements FlexLexer {
/** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

/** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\0\1\0\1\7"+
    "\1\0\1\5\2\0\1\7\2\0\1\4\3\0\1\6\1\3\21\0"+
    "\32\6\4\0\1\6\1\0\1\15\1\6\1\25\1\27\1\11\1\23"+
    "\1\22\1\26\1\16\2\6\1\14\1\12\1\20\1\31\1\13\1\6"+
    "\1\17\1\21\1\10\1\30\1\6\1\24\1\6\1\32\1\6\1\33"+
    "\1\0\1\34\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\16\1\1\3\1\4\1\5\1\0"+
    "\1\6\1\0\1\7\6\0\1\10\6\0\2\5\3\0"+
    "\1\10\6\0\1\10\4\0\1\10\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[75];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\35\0\127\0\164\0\221\0\256"+
    "\0\313\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196"+
    "\0\u01b3\0\u01d0\0\35\0\35\0\u01ed\0\u020a\0\164\0\221"+
    "\0\35\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b\0\u02b8\0\u02d5"+
    "\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383\0\u03a0\0\35"+
    "\0\u03bd\0\u03da\0\u03f7\0\35\0\u0414\0\u0431\0\u044e\0\u046b"+
    "\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536\0\u0553"+
    "\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4\0\u0601\0\u061e\0\u063b"+
    "\0\u0658\0\u0675\0\u0692\0\u06af\0\u06cc\0\u06e9\0\u0706\0\u0723"+
    "\0\u0740\0\u075d\0\u077a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[75];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\15\1\2"+
    "\1\16\1\17\1\2\1\20\1\2\1\21\1\2\1\22"+
    "\3\2\1\23\1\24\37\0\1\4\35\0\1\25\1\26"+
    "\36\0\1\27\1\0\23\27\2\0\7\30\1\31\25\30"+
    "\11\0\1\32\37\0\1\33\41\0\1\34\30\0\1\35"+
    "\1\0\1\36\33\0\1\37\41\0\1\40\26\0\1\41"+
    "\43\0\1\42\41\0\1\43\20\0\1\44\3\0\1\45"+
    "\24\0\1\46\23\0\1\25\1\47\1\50\32\25\4\26"+
    "\1\51\30\26\12\0\1\52\43\0\1\53\35\0\1\54"+
    "\31\0\1\55\33\0\1\56\26\0\1\57\35\0\1\60"+
    "\35\0\1\61\40\0\1\62\35\0\1\63\31\0\1\64"+
    "\4\0\1\65\34\0\1\54\36\0\1\66\13\0\1\50"+
    "\32\0\3\26\1\50\1\51\30\26\13\0\1\67\32\0"+
    "\1\70\40\0\1\71\37\0\1\72\25\0\1\73\35\0"+
    "\1\74\33\0\1\75\33\0\1\76\35\0\1\77\37\0"+
    "\1\54\31\0\1\54\40\0\1\100\33\0\1\101\36\0"+
    "\1\102\30\0\1\54\32\0\1\54\43\0\1\103\30\0"+
    "\1\104\42\0\1\105\40\0\1\106\24\0\1\76\47\0"+
    "\1\107\21\0\1\110\42\0\1\54\26\0\1\64\27\0"+
    "\1\111\37\0\1\112\47\0\1\54\22\0\1\72\30\0"+
    "\1\65\56\0\1\54\17\0\1\113\44\0\1\65\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1943];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


/* error codes */
private static final int ZZ_UNKNOWN_ERROR = 0;
private static final int ZZ_NO_MATCH = 1;
private static final int ZZ_PUSHBACK_2BIG = 2;
private static final char[] EMPTY_BUFFER = new char[0];
private static final int YYEOF = -1;
private static java.io.Reader zzReader = null; // Fake

/* error messages for the codes above */
private static final String ZZ_ERROR_MSG[] = {
  "Unkown internal scanner error",
  "Error: could not match input",
  "Error: pushback value was too large"
};

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\16\1\2\11\1\1\1\0"+
    "\1\1\1\0\1\11\6\0\1\1\6\0\1\1\1\11"+
    "\3\0\1\11\6\0\1\1\4\0\1\1\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[75];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

/** the current state of the DFA */
private int zzState;

/** the current lexical state */
private int zzLexicalState = YYINITIAL;

/** this buffer contains the current text to be matched and is
    the source of the yytext() string */
private CharSequence zzBuffer = "";

/** this buffer may contains the current text array to be matched when it is cheap to acquire it */
private char[] zzBufferArray;

/** the textposition at the last accepting state */
private int zzMarkedPos;

/** the textposition at the last state to be included in yytext */
private int zzPushbackPos;

/** the current text position in the buffer */
private int zzCurrentPos;

/** startRead marks the beginning of the yytext() string in the buffer */
private int zzStartRead;

/** endRead marks the last character in the buffer, that has been read
    from input */
private int zzEndRead;

/**
 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
 */
private boolean zzAtBOL = true;

/** zzAtEOF == true <=> the scanner is at the EOF */
private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _SoyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SoyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

public final int getTokenStart(){
  return zzStartRead;
}

public final int getTokenEnd(){
  return getTokenStart() + yylength();
}

public void reset(CharSequence buffer, int start, int end,int initialState){
  zzBuffer = buffer;
  zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
  zzCurrentPos = zzMarkedPos = zzStartRead = start;
  zzPushbackPos = 0;
  zzAtEOF  = false;
  zzAtBOL = true;
  zzEndRead = end;
  yybegin(initialState);
}

// For Demetra compatibility
public void reset(CharSequence buffer, int initialState){
  zzBuffer = buffer;
  zzBufferArray = null;
  zzCurrentPos = zzMarkedPos = zzStartRead = 0;
  zzPushbackPos = 0;
  zzAtEOF = false;
  zzAtBOL = true;
  zzEndRead = buffer.length();
  yybegin(initialState);
}

/**
 * Refills the input buffer.
 *
 * @return      <code>false</code>, iff there was new input.
 *
 * @exception   java.io.IOException  if any I/O-Error occurs
 */
private boolean zzRefill() throws java.io.IOException {
  return true;
}


/**
 * Returns the current lexical state.
 */
public final int yystate() {
  return zzLexicalState;
}


/**
 * Enters a new lexical state
 *
 * @param newState the new lexical state
 */
public final void yybegin(int newState) {
  zzLexicalState = newState;
}


/**
 * Returns the text matched by the current regular expression.
 */
public final CharSequence yytext() {
  return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
}


/**
 * Returns the character at position <tt>pos</tt> from the
 * matched text.
 *
 * It is equivalent to yytext().charAt(pos), but faster
 *
 * @param pos the position of the character to fetch.
 *            A value from 0 to yylength()-1.
 *
 * @return the character at position pos
 */
public final char yycharat(int pos) {
  return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
}


/**
 * Returns the length of the matched text region.
 */
public final int yylength() {
  return zzMarkedPos-zzStartRead;
}


/**
 * Reports an error that occured while scanning.
 *
 * In a wellformed scanner (no or only correct usage of
 * yypushback(int) and a match-all fallback rule) this method
 * will only be called with things that "Can't Possibly Happen".
 * If this method is called, something is seriously wrong
 * (e.g. a JFlex bug producing a faulty scanner etc.).
 *
 * Usual syntax/scanner level error handling should be done
 * in error fallback rules.
 *
 * @param   errorCode  the code of the errormessage to display
 */
  private void zzScanError(int errorCode) {
  String message;
  try {
    message = ZZ_ERROR_MSG[errorCode];
  }
  catch (ArrayIndexOutOfBoundsException e) {
    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
  }

    throw new Error(message);
}


/**
 * Pushes the specified amount of characters back into the input stream.
 *
 * They will be read again by then next call of the scanning method
 *
 * @param number  the number of characters to be read again.
 *                This number must not be greater than yylength()!
 */
  public void yypushback(int number)  {
  if ( number > yylength() )
    zzScanError(ZZ_PUSHBACK_2BIG);

  zzMarkedPos -= number;
}


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


/**
 * Resumes scanning until the next regular expression is matched,
 * the end of input is encountered or an I/O-Error occurs.
 *
 * @return      the next token
 * @exception   java.io.IOException  if any I/O-Error occurs
 */
  public IElementType advance() throws java.io.IOException {
  int zzInput;
  int zzAction;

  // cached fields:
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL = zzEndRead;
  CharSequence zzBufferL = zzBuffer;
  char[] zzBufferArrayL = zzBufferArray;
  char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

  while (true) {
    zzMarkedPosL = zzMarkedPos;

    zzAction = -1;

    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


    zzForAction: {
      while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
          zzAction = zzState;
          zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
        }

      }
    }

    // store back cached position
    zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return SoyElementTypes.VARIABLE;
          }
        case 9: break;
        case 1: 
          { return SoyElementTypes.BAD_CHARACTER;
          }
        case 10: break;
        case 8: 
          { return SoyElementTypes.KEYWORD;
          }
        case 11: break;
        case 4: 
          { return SoyElementTypes.RBRACE;
          }
        case 12: break;
        case 2: 
          { return SoyElementTypes.WHITE_SPACE;
          }
        case 13: break;
        case 5: 
          { return SoyElementTypes.COMMENT;
          }
        case 14: break;
        case 3: 
          { return SoyElementTypes.LBRACE;
          }
        case 15: break;
        case 7: 
          { return SoyElementTypes.STRING;
          }
        case 16: break;
      default:
        if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
          zzAtEOF = true;
            zzDoEOF();
            return null;
        }
        else {
            zzScanError(ZZ_NO_MATCH);
        }
    }
  }
}


}
